#!/usr/bin/env bash

# do everything in a subshell
(
  # colors for output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  DARK_GRAY='\033[1;30m'
  NO_COLOR='\033[0m'

  function getScriptLocation()
  {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ]; do # resolve $source until the file is no longer a symlink
      local sourceDir="$( cd -P "$( dirname "$source" )" && pwd )"
      local source="$(readlink "$source")"
      [[ $source != /* ]] && source="$sourceDir/$source" # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
    done
    echo "$( cd -P "$( dirname "$source" )" && pwd )"
  }

  echo -e "${DARK_GRAY}Building${NO_COLOR}"
  yarn build

  if ! [ $? -eq 0 ]; then
    echo -e "${RED}Build failed${NO_COLOR}"
    exit 1
  fi

  scriptDir=$(getScriptLocation)
  rootDir=$(dirname "$scriptDir")
  buildDir="$rootDir/build"

  invalidHTMLExists=0
  for htmlFile in $(find "$buildDir" -name "*.html"); do
    echo -e "${BLUE}===========================${NO_COLOR}"
    echo -e "${BLUE}Checking $htmlFile${NO_COLOR}"
    echo -e "${BLUE}===========================${NO_COLOR}\n"

    npx amphtml-validator $htmlFile

    if ! [ $? -eq 0 ]; then
      echo -e "\n${RED}${htmlFile} is invalid AMP HTML.${NO_COLOR}"
      invalidHTMLExists=1
    fi
  done

  if ! [ $invalidHTMLExists -eq 0 ]; then
    echo -e "${RED}Invalid AMP HTML was present, aborting.${NO_COLOR}"
    exit 1
  fi

  echo -e "${GREEN}Lint passed${NO_COLOR}"
)